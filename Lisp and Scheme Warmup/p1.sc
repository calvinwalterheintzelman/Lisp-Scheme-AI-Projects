(define (delete_dups A)
 (cond ((null? A)
	A)
       ((member (first A) (rest A))
	(delete_dups (rest A)))
       (else (cons (first A) (delete_dups (rest A))))))

(define (set-union A B)
 (cond ((null? A)
	(delete_dups B))
       (else (delete_dups (cons (first A) (set-union (rest A) B))))))

(define (set-intersection A B)
 (cond ((null? A)
	(list))
       ((member (first A) B)
	(delete_dups (cons (first A) (set-intersection (rest A) B))))
       (else (delete_dups (set-intersection (rest A) B)))))

(define (set-minus A B)
 (cond ((null? A)
	(list))
       ((member (first A) B)
	(delete_dups (set-minus (rest A) B)))
       (else (delete_dups (cons (first A) (set-minus (rest A) B))))))
